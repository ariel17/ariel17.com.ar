<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Ariel Gerardo Ríos (programación)</title><link>https://example.com/</link><description></description><atom:link href="/en/categories/programacion.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Sun, 25 Mar 2018 16:13:04 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Quotes IV</title><link>/en/blog/quotes-iv/</link><dc:creator>Ariel Gerardo Ríos</dc:creator><description>&lt;div&gt;&lt;p&gt;This is an extract from the book &lt;em&gt;Getting Real: The Smarter, Faster, Easier Way
to Build a Web Application&lt;/em&gt; by 37Signals, page 115 to 116. &lt;a class="reference external" href="https://gettingreal.37signals.com/"&gt;The book is freely
available to download in its home page&lt;/a&gt; :)&lt;/p&gt;
&lt;div class="section" id="code-speaks"&gt;
&lt;h2&gt;Code Speaks&lt;/h2&gt;
&lt;div class="section" id="listen-when-your-code-pushes-back"&gt;
&lt;h3&gt;Listen when your code pushes back&lt;/h3&gt;
&lt;p&gt;Listen to your code. It will offer suggestions. It will push back. It will tell
you where the pitfalls reside. It will suggest new ways to do things. It will
help you stick to a model of less software.&lt;/p&gt;
&lt;p&gt;Is a new feature requiring weeks of time and thousands of lines of code? That's
your code telling you there's probably a better way. Is there a simple way to
code something in one hour instead of a complicated way that will take ten
hours? Again, that's your code guiding you. Listen.&lt;/p&gt;
&lt;p&gt;Your code can guide you to fixes that are cheap and light. Pay attention when
an easy path emerges. Sure, the feature that's easy to make might not be
exactly the same as the feature you originally had in mind but so what? If it
works well enough and gives you more time to work on something else, it’s a
keeper.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="listen-up"&gt;
&lt;h3&gt;Listen up&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Don't worry about design, if you listen to your code a good design will
appear... Listen to the technical people. If they are complaining about the
difficulty of making changes, then take such complaints seriously and give them
time to fix things.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;-Martin Fowler, Chief Scientist, ThoughtWorks (from &lt;a class="reference external" href="http://martinfowler.com/articles/designDead.html"&gt;Is Design Dead?&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="if-programmers-got-paid-to-remove-code"&gt;
&lt;h3&gt;If Programmers Got Paid To Remove Code...&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;If programmers got paid to remove code from sofware instead of writing new
code, software would be a whole lot better.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;-Nicholas Negroponte, Professor of Media Technology at the Massachusetts
Institute of Technology and founding chairman of MIT's Media Laboratory.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>programming</category><category>quotes</category><guid>/en/blog/quotes-iv/</guid><pubDate>Sun, 10 Aug 2014 21:57:01 GMT</pubDate></item><item><title>Broken properties</title><link>/en/blog/broken-properties/</link><dc:creator>Ariel Gerardo Ríos</dc:creator><description>&lt;div&gt;&lt;p&gt;Yesterday I was fighting a while during the day trying to replace a model field
in &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; with &lt;strong&gt;property&lt;/strong&gt;. Property is a mechanism in &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; language to
implement getters and setters for a class field in a transparent way (&lt;em&gt;in a
pythonic way&lt;/em&gt; some might say). Here a very simple example:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-1"&gt;&lt;/a&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-2"&gt;&lt;/a&gt;&lt;span class="c"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;File: foo.py&lt;/span&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;Description: A very simple property implementation on a very simple class.&lt;/span&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-9"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-12"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-13"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-14"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    This is a foo class implementation.&lt;/span&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-15"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-16"&gt;&lt;/a&gt;    &lt;span class="n"&gt;_foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-18"&gt;&lt;/a&gt;    &lt;span class="nd"&gt;@property&lt;/span&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-19"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-20"&gt;&lt;/a&gt;        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-21"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        Access the _foo field but doing some dummy calculations.&lt;/span&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-22"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        """&lt;/span&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-23"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-24"&gt;&lt;/a&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-25"&gt;&lt;/a&gt;    &lt;span class="nd"&gt;@foo.setter&lt;/span&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-26"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-27"&gt;&lt;/a&gt;        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-28"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        Setter for _foo field but doing some "validations".&lt;/span&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-29"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        """&lt;/span&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-30"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-31"&gt;&lt;/a&gt;            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"foo field cannot be greater than 10"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-32"&gt;&lt;/a&gt;
&lt;a name="rest_code_9194f3a536b44b87af34b86616ea552a-33"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;So this way the recently implemented &lt;tt class="docutils literal"&gt;Foo&lt;/tt&gt; class would be used:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_c11c6b36f6bb4578b1f42619de6361d5-1"&gt;&lt;/a&gt;~&lt;span class="nv"&gt;$ &lt;/span&gt;python
&lt;a name="rest_code_c11c6b36f6bb4578b1f42619de6361d5-2"&gt;&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt; from foo import Foo
&lt;a name="rest_code_c11c6b36f6bb4578b1f42619de6361d5-3"&gt;&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Foo&lt;span class="o"&gt;()&lt;/span&gt;
&lt;a name="rest_code_c11c6b36f6bb4578b1f42619de6361d5-4"&gt;&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt; f._foo  &lt;span class="c"&gt;# _foo field is still accessible&lt;/span&gt;
&lt;a name="rest_code_c11c6b36f6bb4578b1f42619de6361d5-5"&gt;&lt;/a&gt;1
&lt;a name="rest_code_c11c6b36f6bb4578b1f42619de6361d5-6"&gt;&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt; f.foo
&lt;a name="rest_code_c11c6b36f6bb4578b1f42619de6361d5-7"&gt;&lt;/a&gt;1
&lt;a name="rest_code_c11c6b36f6bb4578b1f42619de6361d5-8"&gt;&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt; f._foo &lt;span class="o"&gt;==&lt;/span&gt; f.foo
&lt;a name="rest_code_c11c6b36f6bb4578b1f42619de6361d5-9"&gt;&lt;/a&gt;True
&lt;a name="rest_code_c11c6b36f6bb4578b1f42619de6361d5-10"&gt;&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt; f.foo  &lt;span class="c"&gt;# since f._foo == 1, random will only return 1&lt;/span&gt;
&lt;a name="rest_code_c11c6b36f6bb4578b1f42619de6361d5-11"&gt;&lt;/a&gt;1
&lt;a name="rest_code_c11c6b36f6bb4578b1f42619de6361d5-12"&gt;&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt; f.foo &lt;span class="o"&gt;=&lt;/span&gt; 5
&lt;a name="rest_code_c11c6b36f6bb4578b1f42619de6361d5-13"&gt;&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt; f.foo  &lt;span class="c"&gt;# now f._foo == 5; random numbers will vary between 1 and 5&lt;/span&gt;
&lt;a name="rest_code_c11c6b36f6bb4578b1f42619de6361d5-14"&gt;&lt;/a&gt;3
&lt;a name="rest_code_c11c6b36f6bb4578b1f42619de6361d5-15"&gt;&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt; f.foo &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;  &lt;span class="c"&gt;# this will raise a ValueError exception&lt;/span&gt;
&lt;a name="rest_code_c11c6b36f6bb4578b1f42619de6361d5-16"&gt;&lt;/a&gt;Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;a name="rest_code_c11c6b36f6bb4578b1f42619de6361d5-17"&gt;&lt;/a&gt;  File &lt;span class="s2"&gt;"&amp;lt;stdin&amp;gt;"&lt;/span&gt;, line 1, in &amp;lt;module&amp;gt;
&lt;a name="rest_code_c11c6b36f6bb4578b1f42619de6361d5-18"&gt;&lt;/a&gt;  File &lt;span class="s2"&gt;"foo.py"&lt;/span&gt;, line 31, in foo
&lt;a name="rest_code_c11c6b36f6bb4578b1f42619de6361d5-19"&gt;&lt;/a&gt;    raise ValueError&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"foo field cannot be greater than 10"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c11c6b36f6bb4578b1f42619de6361d5-20"&gt;&lt;/a&gt;ValueError: foo field cannot be greater than 10
&lt;a name="rest_code_c11c6b36f6bb4578b1f42619de6361d5-21"&gt;&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/2/library/functions.html#property"&gt;The official documentation about this functionality&lt;/a&gt; can be found easily.&lt;/p&gt;
&lt;div class="section" id="the-problem-with-django"&gt;
&lt;h2&gt;The problem with Django&lt;/h2&gt;
&lt;p&gt;Implement this functionality in Django for model fields is not a problem at
all. The problem resides on using the other advantages this framework offers
over the field used for this solution. I'm going to make a simple example with
a &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; project:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_93e4f93269534d7d9ca8ebfec9f57e2a-1"&gt;&lt;/a&gt;~&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install python-pip &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo pip install virtualenv
&lt;a name="rest_code_93e4f93269534d7d9ca8ebfec9f57e2a-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_93e4f93269534d7d9ca8ebfec9f57e2a-3"&gt;&lt;/a&gt;... &lt;span class="o"&gt;(&lt;/span&gt;skipped output&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_93e4f93269534d7d9ca8ebfec9f57e2a-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_93e4f93269534d7d9ca8ebfec9f57e2a-5"&gt;&lt;/a&gt;~&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir brokenprop &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;brokenprop
&lt;a name="rest_code_93e4f93269534d7d9ca8ebfec9f57e2a-6"&gt;&lt;/a&gt;~/brokenprop&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv env
&lt;a name="rest_code_93e4f93269534d7d9ca8ebfec9f57e2a-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_93e4f93269534d7d9ca8ebfec9f57e2a-8"&gt;&lt;/a&gt;... &lt;span class="o"&gt;(&lt;/span&gt;skipped output&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_93e4f93269534d7d9ca8ebfec9f57e2a-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_93e4f93269534d7d9ca8ebfec9f57e2a-10"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;~/brokenprop&lt;span class="nv"&gt;$ &lt;/span&gt;pip install django
&lt;a name="rest_code_93e4f93269534d7d9ca8ebfec9f57e2a-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_93e4f93269534d7d9ca8ebfec9f57e2a-12"&gt;&lt;/a&gt;... &lt;span class="o"&gt;(&lt;/span&gt;skipped more output&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_93e4f93269534d7d9ca8ebfec9f57e2a-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_93e4f93269534d7d9ca8ebfec9f57e2a-14"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;~/brokenprop&lt;span class="nv"&gt;$ &lt;/span&gt;django-admin.py startproject brokenprop &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;brokenprop
&lt;a name="rest_code_93e4f93269534d7d9ca8ebfec9f57e2a-15"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;~/brokenprop/brokenprop&lt;span class="nv"&gt;$ &lt;/span&gt;chmod +x manage.py &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./manage.py startapp propapp
&lt;/pre&gt;&lt;p&gt;The test project was initialized. By default &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; has configured &lt;a class="reference external" href="http://www.sqlite.org/"&gt;SQLite&lt;/a&gt; as
database engine and for this example it is more than enough. I'm going to edit
the &lt;tt class="docutils literal"&gt;propapp&lt;/tt&gt; application's models module and implement getter and setter in
a class. The result is very similar to the previous example:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-1"&gt;&lt;/a&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-2"&gt;&lt;/a&gt;&lt;span class="c"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;File: models.py&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;Description: Model implementations for application 'propapp'.&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-9"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-12"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-13"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-14"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    A foo model implementation.&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-15"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-16"&gt;&lt;/a&gt;    &lt;span class="n"&gt;_foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-17"&gt;&lt;/a&gt;        &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-18"&gt;&lt;/a&gt;        &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-19"&gt;&lt;/a&gt;        &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-20"&gt;&lt;/a&gt;        &lt;span class="n"&gt;db_column&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c"&gt;# keeps the field name as it should&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-21"&gt;&lt;/a&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-23"&gt;&lt;/a&gt;    &lt;span class="nd"&gt;@property&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-24"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-25"&gt;&lt;/a&gt;        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-26"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        The foo getter&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-27"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        """&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-28"&gt;&lt;/a&gt;        &lt;span class="c"&gt;# doing the things that a getter method does ...&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-29"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_foo&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-30"&gt;&lt;/a&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-31"&gt;&lt;/a&gt;    &lt;span class="nd"&gt;@foo.setter&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-32"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-33"&gt;&lt;/a&gt;        &lt;span class="c"&gt;# doing the things that a setter method does ...&lt;/span&gt;
&lt;a name="rest_code_a1f830e2130840f38ef65a4797372a06-34"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;So there it is: a field model with its methods. Here is how to use them:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_396598442f5e46d1bf7840711b8fb6ec-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;~/brokenprop/brokenprop&lt;span class="nv"&gt;$ &lt;/span&gt;./manage.py syncdb --noinput
&lt;a name="rest_code_396598442f5e46d1bf7840711b8fb6ec-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_396598442f5e46d1bf7840711b8fb6ec-3"&gt;&lt;/a&gt;... &lt;span class="o"&gt;(&lt;/span&gt;skipped output &lt;span class="k"&gt;for&lt;/span&gt; sync stuff&lt;span class="o"&gt;)&lt;/span&gt; ...
&lt;a name="rest_code_396598442f5e46d1bf7840711b8fb6ec-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_396598442f5e46d1bf7840711b8fb6ec-5"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;~/brokenprop/brokenprop&lt;span class="nv"&gt;$ &lt;/span&gt;./manage.py shell
&lt;a name="rest_code_396598442f5e46d1bf7840711b8fb6ec-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_396598442f5e46d1bf7840711b8fb6ec-7"&gt;&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt; from propapp.models import Foo
&lt;a name="rest_code_396598442f5e46d1bf7840711b8fb6ec-8"&gt;&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Foo&lt;span class="o"&gt;()&lt;/span&gt;
&lt;a name="rest_code_396598442f5e46d1bf7840711b8fb6ec-9"&gt;&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt; f.foo &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;
&lt;a name="rest_code_396598442f5e46d1bf7840711b8fb6ec-10"&gt;&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt; f._foo
&lt;a name="rest_code_396598442f5e46d1bf7840711b8fb6ec-11"&gt;&lt;/a&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;
&lt;a name="rest_code_396598442f5e46d1bf7840711b8fb6ec-12"&gt;&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt; f._foo &lt;span class="o"&gt;==&lt;/span&gt; f.foo
&lt;a name="rest_code_396598442f5e46d1bf7840711b8fb6ec-13"&gt;&lt;/a&gt;True
&lt;/pre&gt;&lt;p&gt;Everything is ok til here; much more, everything is the same, no problem so
far. The problems begin when a query on the field is made:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_eb132c3d3879495e9d7e725c87f99d58-1"&gt;&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt; Foo.objects.filter&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'bar'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_eb132c3d3879495e9d7e725c87f99d58-2"&gt;&lt;/a&gt;Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;a name="rest_code_eb132c3d3879495e9d7e725c87f99d58-3"&gt;&lt;/a&gt;...
&lt;a name="rest_code_eb132c3d3879495e9d7e725c87f99d58-4"&gt;&lt;/a&gt;File &lt;span class="s2"&gt;"/home/ariel17/brokenprop/env/local/lib/python2.7/site-packages/django/db/models/sql/query.py"&lt;/span&gt;, line 1283, in names_to_path
&lt;a name="rest_code_eb132c3d3879495e9d7e725c87f99d58-5"&gt;&lt;/a&gt;  &lt;span class="s2"&gt;"Choices are: %s"&lt;/span&gt; % &lt;span class="o"&gt;(&lt;/span&gt;name, &lt;span class="s2"&gt;", "&lt;/span&gt;.join&lt;span class="o"&gt;(&lt;/span&gt;available&lt;span class="o"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_eb132c3d3879495e9d7e725c87f99d58-6"&gt;&lt;/a&gt;FieldError: Cannot resolve keyword &lt;span class="s1"&gt;'foo'&lt;/span&gt; into field. Choices are: _foo, id
&lt;a name="rest_code_eb132c3d3879495e9d7e725c87f99d58-7"&gt;&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;p&gt;Ok, the field cannot be used as it was supposed to be &lt;tt class="docutils literal"&gt;:(&lt;/tt&gt;. Suppose that this
cost is worthless for me and I want to continue this way, I don't care that the
field name is not intuitive enough: I want (and I will) put what it requires to
be putted to get to the field name:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-1"&gt;&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt; Foo.objects.filter&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;_foo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'bar'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-2"&gt;&lt;/a&gt;Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-3"&gt;&lt;/a&gt;...
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-4"&gt;&lt;/a&gt;File &lt;span class="s2"&gt;"/home/ariel17/brokenprop/env/local/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"&lt;/span&gt;, line 451, in execute
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-5"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; Database.Cursor.execute&lt;span class="o"&gt;(&lt;/span&gt;self, query, params&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-6"&gt;&lt;/a&gt;OperationalError: no such table: propapp_foo
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-8"&gt;&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt; Foo.objects.filter&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;__foo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'bar'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-9"&gt;&lt;/a&gt;Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-10"&gt;&lt;/a&gt;...
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-11"&gt;&lt;/a&gt;File &lt;span class="s2"&gt;"/home/ariel17/brokenprop/env/local/lib/python2.7/site-packages/django/db/models/sql/query.py"&lt;/span&gt;, line 1283, in names_to_path
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-12"&gt;&lt;/a&gt;  &lt;span class="s2"&gt;"Choices are: %s"&lt;/span&gt; % &lt;span class="o"&gt;(&lt;/span&gt;name, &lt;span class="s2"&gt;", "&lt;/span&gt;.join&lt;span class="o"&gt;(&lt;/span&gt;available&lt;span class="o"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-13"&gt;&lt;/a&gt;FieldError: Cannot resolve keyword &lt;span class="s1"&gt;''&lt;/span&gt; into field. Choices are: _foo, id
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-15"&gt;&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt; Foo.objects.filter&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;propapp__foo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'bar'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-16"&gt;&lt;/a&gt;Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-17"&gt;&lt;/a&gt;...
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-18"&gt;&lt;/a&gt;File &lt;span class="s2"&gt;"/home/ariel17/brokenprop/env/local/lib/python2.7/site-packages/django/db/models/sql/query.py"&lt;/span&gt;, line 1283, in names_to_path
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-19"&gt;&lt;/a&gt;  &lt;span class="s2"&gt;"Choices are: %s"&lt;/span&gt; % &lt;span class="o"&gt;(&lt;/span&gt;name, &lt;span class="s2"&gt;", "&lt;/span&gt;.join&lt;span class="o"&gt;(&lt;/span&gt;available&lt;span class="o"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-20"&gt;&lt;/a&gt;FieldError: Cannot resolve keyword &lt;span class="s1"&gt;'propapp'&lt;/span&gt; into field. Choices are: _foo, id
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-22"&gt;&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt; Foo.objects.filter&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;propapp_foo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'bar'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-23"&gt;&lt;/a&gt;Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-24"&gt;&lt;/a&gt;...
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-25"&gt;&lt;/a&gt;File &lt;span class="s2"&gt;"/home/ariel17/brokenprop/env/local/lib/python2.7/site-packages/django/db/models/sql/query.py"&lt;/span&gt;, line 1283, in names_to_path
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-26"&gt;&lt;/a&gt;  &lt;span class="s2"&gt;"Choices are: %s"&lt;/span&gt; % &lt;span class="o"&gt;(&lt;/span&gt;name, &lt;span class="s2"&gt;", "&lt;/span&gt;.join&lt;span class="o"&gt;(&lt;/span&gt;available&lt;span class="o"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-27"&gt;&lt;/a&gt;FieldError: Cannot resolve keyword &lt;span class="s1"&gt;'propapp_foo'&lt;/span&gt; into field. Choices are: _foo, id
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-28"&gt;&lt;/a&gt;
&lt;a name="rest_code_b5ef83b325c3429d9f157501ba1f4478-29"&gt;&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;The field is not reachable to be used on queries&lt;/strong&gt;. The issue &lt;a class="reference external" href="https://code.djangoproject.com/ticket/3148"&gt;#3148&lt;/a&gt; on
&lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;'s track system talks about it, but the solution propoused, on which
this post is based, does not provide the expected functionality (&lt;a class="reference external" href="https://code.djangoproject.com/ticket/3148#comment:51"&gt;here my
complains&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Except, of course, that &lt;strong&gt;I miss something&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>django</category><category>programming</category><category>python</category><guid>/en/blog/broken-properties/</guid><pubDate>Sat, 12 Jul 2014 22:56:51 GMT</pubDate></item></channel></rss>